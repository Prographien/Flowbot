=== ./backend/src/app.js ===
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const flowRoutes = require('./routes/flowRoutes');
const templateRoutes = require('./routes/templateRoutes');
const chatRoutes = require('./routes/chatRoutes');

const app = express();

// Middleware
app.use(express.json());
app.use(cors({
  origin: process.env.ALLOWED_ORIGINS?.split(',') || 'http://localhost:3000'
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100 // limit each IP to 100 requests per windowMs
});
app.use(limiter);

// Routes
app.use('/api/flows', flowRoutes);
app.use('/api/templates', templateRoutes);
app.use('/api/chat', chatRoutes);

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ message: 'Something went wrong!' });
});

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/chatbot-builder')
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => console.error('MongoDB connection error:', err));

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
}); 
=== ./backend/src/controllers/chatController.js ===
const OpenAI = require('openai');
const Flow = require('../models/Flow');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// Process chat message
exports.processMessage = async (req, res) => {
  try {
    const { flowId, message, context } = req.body;
    
    // Get the flow
    const flow = await Flow.findById(flowId);
    if (!flow) {
      return res.status(404).json({ message: 'Flow not found' });
    }

    // Find the appropriate node based on context
    const currentNode = flow.nodes.find(node => node.id === context.currentNodeId);
    if (!currentNode) {
      return res.status(404).json({ message: 'Node not found' });
    }

    // Process with OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { 
          role: "system", 
          content: `You are a chatbot following this flow: ${JSON.stringify(currentNode)}. 
                   Respond according to the flow's logic and maintain conversation context.`
        },
        { role: "user", content: message }
      ],
      temperature: 0.7,
    });

    // Get next node based on AI response
    const response = completion.choices[0].message.content;
    const nextNodeId = determineNextNode(flow, currentNode, response);

    res.json({
      response,
      nextNodeId,
      context: {
        ...context,
        currentNodeId: nextNodeId
      }
    });

  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Initialize chat session
exports.initializeChat = async (req, res) => {
  try {
    const { flowId } = req.body;
    
    const flow = await Flow.findById(flowId);
    if (!flow) {
      return res.status(404).json({ message: 'Flow not found' });
    }

    // Find start node
    const startNode = flow.nodes.find(node => node.type === 'start');
    if (!startNode) {
      return res.status(400).json({ message: 'Invalid flow: no start node found' });
    }

    res.json({
      flowId,
      context: {
        currentNodeId: startNode.id,
        variables: {}
      },
      initialMessage: startNode.content || "Hello! How can I help you today?"
    });

  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Helper function to determine next node
function determineNextNode(flow, currentNode, response) {
  if (!currentNode.next) {
    return null;
  }

  if (typeof currentNode.next === 'string') {
    return currentNode.next;
  }

  // Handle conditional logic here
  const edges = flow.edges.filter(edge => edge.source === currentNode.id);
  if (edges.length === 0) {
    return null;
  }

  // For now, just return the first edge's target
  // In a full implementation, you'd analyze the response and conditions
  return edges[0].target;
} 
=== ./backend/src/controllers/flowController.js ===
const Flow = require('../models/Flow');

// Get all flows
exports.getFlows = async (req, res) => {
  try {
    const flows = await Flow.find({ createdBy: req.user.id });
    res.json(flows);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Get a single flow
exports.getFlow = async (req, res) => {
  try {
    const flow = await Flow.findById(req.params.id);
    if (!flow) {
      return res.status(404).json({ message: 'Flow not found' });
    }
    res.json(flow);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Create a new flow
exports.createFlow = async (req, res) => {
  try {
    const flow = new Flow({
      ...req.body,
      createdBy: req.user.id
    });
    const newFlow = await flow.save();
    res.status(201).json(newFlow);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// Update a flow
exports.updateFlow = async (req, res) => {
  try {
    const flow = await Flow.findById(req.params.id);
    if (!flow) {
      return res.status(404).json({ message: 'Flow not found' });
    }
    
    if (flow.createdBy !== req.user.id) {
      return res.status(403).json({ message: 'Not authorized' });
    }

    Object.assign(flow, req.body);
    flow.updatedAt = Date.now();
    
    const updatedFlow = await flow.save();
    res.json(updatedFlow);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// Delete a flow
exports.deleteFlow = async (req, res) => {
  try {
    const flow = await Flow.findById(req.params.id);
    if (!flow) {
      return res.status(404).json({ message: 'Flow not found' });
    }

    if (flow.createdBy !== req.user.id) {
      return res.status(403).json({ message: 'Not authorized' });
    }

    await flow.remove();
    res.json({ message: 'Flow deleted' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Clone a template
exports.cloneTemplate = async (req, res) => {
  try {
    const template = await Flow.findById(req.params.id);
    if (!template || !template.isTemplate) {
      return res.status(404).json({ message: 'Template not found' });
    }

    const newFlow = new Flow({
      ...template.toObject(),
      _id: undefined,
      isTemplate: false,
      createdBy: req.user.id,
      name: `${template.name} Copy`,
      createdAt: Date.now(),
      updatedAt: Date.now()
    });

    const savedFlow = await newFlow.save();
    res.status(201).json(savedFlow);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
}; 
=== ./backend/src/controllers/templateController.js ===
const Flow = require('../models/Flow');

// Get all templates
exports.getTemplates = async (req, res) => {
  try {
    const templates = await Flow.find({ isTemplate: true });
    res.json(templates);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Get template by category
exports.getTemplatesByCategory = async (req, res) => {
  try {
    const templates = await Flow.find({ 
      isTemplate: true,
      category: req.params.category 
    });
    res.json(templates);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Create a template
exports.createTemplate = async (req, res) => {
  try {
    const template = new Flow({
      ...req.body,
      isTemplate: true,
      createdBy: req.user.id
    });
    const newTemplate = await template.save();
    res.status(201).json(newTemplate);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// Update a template
exports.updateTemplate = async (req, res) => {
  try {
    const template = await Flow.findById(req.params.id);
    if (!template || !template.isTemplate) {
      return res.status(404).json({ message: 'Template not found' });
    }

    Object.assign(template, req.body);
    template.updatedAt = Date.now();
    
    const updatedTemplate = await template.save();
    res.json(updatedTemplate);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// Delete a template
exports.deleteTemplate = async (req, res) => {
  try {
    const template = await Flow.findById(req.params.id);
    if (!template || !template.isTemplate) {
      return res.status(404).json({ message: 'Template not found' });
    }

    await template.deleteOne();
    res.json({ message: 'Template deleted' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
}; 
=== ./backend/src/models/Flow.js ===
const mongoose = require('mongoose');

const nodeSchema = new mongoose.Schema({
  id: { type: String, required: true },
  type: { type: String, required: true },
  content: String,
  options: [String],
  next: {
    type: mongoose.Schema.Types.Mixed,
    default: null
  },
  position: {
    x: Number,
    y: Number
  }
});

const flowSchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: String,
  nodes: [nodeSchema],
  edges: [{
    source: String,
    target: String,
    condition: String
  }],
  createdBy: { type: String, required: true },
  isTemplate: { type: Boolean, default: false },
  category: String,
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Flow', flowSchema); 
=== ./backend/src/routes/chatRoutes.js ===
const express = require('express');
const router = express.Router();
const chatController = require('../controllers/chatController');

// Initialize chat session
router.post('/initialize', chatController.initializeChat);

// Process chat message
router.post('/message', chatController.processMessage);

module.exports = router; 
=== ./backend/src/routes/flowRoutes.js ===
const express = require('express');
const router = express.Router();
const flowController = require('../controllers/flowController');

// Get all flows
router.get('/', flowController.getFlows);

// Get a single flow
router.get('/:id', flowController.getFlow);

// Create a new flow
router.post('/', flowController.createFlow);

// Update a flow
router.put('/:id', flowController.updateFlow);

// Delete a flow
router.delete('/:id', flowController.deleteFlow);

// Clone a template
router.post('/template/:id/clone', flowController.cloneTemplate);

module.exports = router; 
=== ./backend/src/routes/templateRoutes.js ===
const express = require('express');
const router = express.Router();
const templateController = require('../controllers/templateController');

// Get all templates
router.get('/', templateController.getTemplates);

// Get templates by category
router.get('/category/:category', templateController.getTemplatesByCategory);

// Create a template
router.post('/', templateController.createTemplate);

// Update a template
router.put('/:id', templateController.updateTemplate);

// Delete a template
router.delete('/:id', templateController.deleteTemplate);

module.exports = router; 
=== ./backend/src/server.js ===
const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
require('dotenv').config();

const flowRoutes = require('./routes/flowRoutes');
const templateRoutes = require('./routes/templateRoutes');
const chatRoutes = require('./routes/chatRoutes');

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('Connected to MongoDB'))
  .catch((err) => console.error('MongoDB connection error:', err));

// Routes
app.use('/api/flows', flowRoutes);
app.use('/api/templates', templateRoutes);
app.use('/api/chat', chatRoutes);

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ message: 'Something went wrong!' });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
}); 
=== ./integrations/web-sdk/chatbot-sdk.js ===
class ChatbotSDK {
  constructor(config) {
    this.config = {
      flowId: null,
      container: '#chatbot-container',
      apiUrl: 'http://localhost:5000/api',
      theme: {
        primaryColor: '#007bff',
        fontFamily: 'Arial',
        buttonColor: '#007bff',
        messageColor: '#333',
        userMessageBg: '#e3f2fd',
        botMessageBg: '#f5f5f5',
      },
      position: 'bottom-right',
      ...config,
    };

    this.context = null;
    this.eventHandlers = {
      message: [],
      error: [],
      ready: [],
    };

    this.init();
  }

  init() {
    // Create container if not exists
    this.createContainer();
    
    // Initialize chat session
    this.initializeChat();

    // Add styles
    this.addStyles();

    // Add event listeners
    this.addEventListeners();

    // Emit ready event
    this.emit('ready');
  }

  createContainer() {
    if (typeof this.config.container === 'string') {
      this.container = document.querySelector(this.config.container);
      if (!this.container) {
        this.container = document.createElement('div');
        this.container.id = this.config.container.replace('#', '');
        document.body.appendChild(this.container);
      }
    } else {
      this.container = this.config.container;
    }

    // Set container styles based on position
    this.container.style.position = 'fixed';
    this.container.style.zIndex = '9999';
    
    switch (this.config.position) {
      case 'bottom-right':
        this.container.style.bottom = '20px';
        this.container.style.right = '20px';
        break;
      case 'bottom-left':
        this.container.style.bottom = '20px';
        this.container.style.left = '20px';
        break;
      case 'top-right':
        this.container.style.top = '20px';
        this.container.style.right = '20px';
        break;
      case 'top-left':
        this.container.style.top = '20px';
        this.container.style.left = '20px';
        break;
    }

    // Create chat interface
    this.container.innerHTML = `
      <div class="chatbot-widget">
        <div class="chatbot-header">
          <span class="chatbot-title">Chat Support</span>
          <button class="chatbot-toggle">×</button>
        </div>
        <div class="chatbot-messages"></div>
        <div class="chatbot-input">
          <textarea placeholder="Type a message..."></textarea>
          <button class="chatbot-send">Send</button>
        </div>
      </div>
    `;
  }

  addStyles() {
    const styles = document.createElement('style');
    styles.textContent = `
      .chatbot-widget {
        width: 350px;
        height: 500px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        display: flex;
        flex-direction: column;
        font-family: ${this.config.theme.fontFamily};
      }

      .chatbot-header {
        padding: 15px;
        background: ${this.config.theme.primaryColor};
        color: white;
        border-radius: 10px 10px 0 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .chatbot-toggle {
        background: none;
        border: none;
        color: white;
        font-size: 24px;
        cursor: pointer;
      }

      .chatbot-messages {
        flex: 1;
        overflow-y: auto;
        padding: 15px;
        display: flex;
        flex-direction: column;
        gap: 10px;
      }

      .chatbot-message {
        max-width: 80%;
        padding: 10px;
        border-radius: 10px;
        margin: 5px 0;
      }

      .chatbot-message.user {
        background: ${this.config.theme.userMessageBg};
        align-self: flex-end;
      }

      .chatbot-message.bot {
        background: ${this.config.theme.botMessageBg};
        align-self: flex-start;
      }

      .chatbot-input {
        padding: 15px;
        border-top: 1px solid #eee;
        display: flex;
        gap: 10px;
      }

      .chatbot-input textarea {
        flex: 1;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 5px;
        resize: none;
        font-family: inherit;
      }

      .chatbot-send {
        padding: 8px 15px;
        background: ${this.config.theme.buttonColor};
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }

      .chatbot-send:disabled {
        opacity: 0.6;
        cursor: not-allowed;
      }
    `;
    document.head.appendChild(styles);
  }

  addEventListeners() {
    const textarea = this.container.querySelector('textarea');
    const sendButton = this.container.querySelector('.chatbot-send');
    const toggleButton = this.container.querySelector('.chatbot-toggle');

    textarea.addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        this.sendMessage(textarea.value);
        textarea.value = '';
      }
    });

    sendButton.addEventListener('click', () => {
      this.sendMessage(textarea.value);
      textarea.value = '';
    });

    toggleButton.addEventListener('click', () => {
      const widget = this.container.querySelector('.chatbot-widget');
      widget.style.display = widget.style.display === 'none' ? 'flex' : 'none';
    });
  }

  async initializeChat() {
    try {
      const response = await fetch(`${this.config.apiUrl}/chat/initialize`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          flowId: this.config.flowId,
        }),
      });

      const data = await response.json();
      this.context = data.context;

      if (data.initialMessage) {
        this.addMessage(data.initialMessage, 'bot');
      }
    } catch (error) {
      this.emit('error', error);
    }
  }

  async sendMessage(message) {
    if (!message.trim() || !this.context) return;

    this.addMessage(message, 'user');

    try {
      const response = await fetch(`${this.config.apiUrl}/chat/message`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          flowId: this.config.flowId,
          message,
          context: this.context,
        }),
      });

      const data = await response.json();
      this.context = data.context;
      this.addMessage(data.response, 'bot');
      this.emit('message', { type: 'bot', content: data.response });
    } catch (error) {
      this.emit('error', error);
      this.addMessage('Sorry, there was an error processing your message.', 'bot');
    }
  }

  addMessage(text, sender) {
    const messagesContainer = this.container.querySelector('.chatbot-messages');
    const messageElement = document.createElement('div');
    messageElement.className = `chatbot-message ${sender}`;
    messageElement.textContent = text;
    messagesContainer.appendChild(messageElement);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  on(event, handler) {
    if (this.eventHandlers[event]) {
      this.eventHandlers[event].push(handler);
    }
  }

  off(event, handler) {
    if (this.eventHandlers[event]) {
      this.eventHandlers[event] = this.eventHandlers[event].filter(
        (h) => h !== handler
      );
    }
  }

  emit(event, data) {
    if (this.eventHandlers[event]) {
      this.eventHandlers[event].forEach((handler) => handler(data));
    }
  }
}

// Export for different module systems
if (typeof module !== 'undefined' && module.exports) {
  module.exports = ChatbotSDK;
} else if (typeof define === 'function' && define.amd) {
  define([], () => ChatbotSDK);
} else {
  window.ChatbotSDK = ChatbotSDK;
} 
